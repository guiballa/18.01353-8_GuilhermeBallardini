// Especificação do parser CUP
package parser;
import java_cup.runtime.*;
import java.util.Hashtable;

// Hashtable Para variaveis
parser code {:
    private Hashtable<String,Double> symbolTable = new Hashtable<>();
:}

// Definição dos terminais
terminal            ERROR, SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD, EXPON;
terminal            UMINUS, LPAREN, RPAREN;
terminal Double     NUMBER;
terminal String     ID;
// Definição dos não-terminais
non terminal            expr_list, expr_part;
non terminal Double     expr;
// Precedência e associatividade dos operadores
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right EXPON;
precedence left UMINUS;
// Regras da gramática
expr_list ::= expr_list expr_part 
    | expr_part
    ;
expr_part ::= expr:e {: 
        System.out.println("Resultado: " + e); :} SEMI
    | error SEMI
    ;
expr ::= expr:e1 PLUS expr:e2 
            {: RESULT = new Double(e1 + e2); :}
    | expr:e1 MINUS expr:e2 
            {: RESULT = new Double(e1 - e2); :}
    | expr:e1 TIMES expr:e2 
            {: RESULT = new Double(e1 * e2); :}
    | expr:e1 EXPON expr:e2
            {: RESULT = new Double(Math.pow(e1,e2)); :}
    | expr:e1 DIVIDE expr:e2 
            {: RESULT = new Double(e1 / e2); :}
    | expr:e1 MOD expr:e2 
            {: RESULT = new Double(e1 % e2); :}
    | NUMBER:n {: RESULT = n; :}
    | MINUS expr:e {: RESULT = 
                        new Double(0 - e);
                    :} %prec UMINUS
    | LPAREN expr:e RPAREN {: RESULT = e; :}
    ;



